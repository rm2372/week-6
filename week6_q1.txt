

    #include<iostream>
    using namespace std;
    float vol(int,int);
    float vol(float);
    int vol(int);
     
    int main()
    {
        int r,h,a;
        float r1;
        cout<<"Enter radius and height of a cylinder:";
        cin>>r>>h;
        cout<<"Enter side of cube:";
        cin>>a;
        cout<<"Enter radius of sphere: ";
        cin>>r1;
        cout<<"Volume of cylinder is "<<vol(r,h);
        cout<<"\nVolume of cube is "<<vol(a);
        cout<<"\nVolume of sphere is "<<vol(r1);
        return 0;
    }
    float vol(int r,int h)
    {
        return(3.14*r*r*h);
    }
    float vol(float r1)
    {
        return((4*3.14*r1*r1*r1)/3);
    }
    int vol(int a)
    {
        return(a*a*a);
    }


question 01


#include <cstring>
#include <iostream>
#include <string.h>

using namespace std;

class CompareString {

public:
	
	char str[25];

	CompareString(char str1[])
	{
		
		strcpy(this->str, str1);
	}

	//
	int operator==(CompareString s2)
	{
		if (strcmp(str, s2.str) == 0)
			return 1;
		else
			return 0;
	}

	
	int operator<=(CompareString s3)
	{
		if (strlen(str) <= strlen(s3.str))
			return 1;
		else
			return 0;
	}

	
	int operator>=(CompareString s3)
	{
		if (strlen(str) >= strlen(s3.str))
			return 1;
		else
			return 0;
	}
};

void compare(CompareString s1, CompareString s2)
{

	if (s1 == s2)
		cout << s1.str << " is equal to "
			<< s2.str << endl;
	else {
		cout << s1.str << " is not equal to "
			<< s2.str << endl;
		if (s1 >= s2)
			cout << s1.str << " is greater than "
				<< s2.str << endl;
		else
			cout << s2.str << " is greater than "
				<< s1.str << endl;
	}
}

void testcase1()
{
	
	char str1[] = "Geeks";
	char str2[] = "ForGeeks";

	
	CompareString s1(str1);
	CompareString s2(str2);

	cout << "Comparing \"" << s1.str << "\" and \""
		<< s2.str << "\"" << endl;

	compare(s1, s2);
}

void testcase2()
{
	
	char str1[] = "Geeks";
	char str2[] = "Geeks";


	CompareString s1(str1);
	CompareString s2(str2);

	cout << "\n\nComparing \"" << s1.str << "\" and \""
		<< s2.str << "\"" << endl;

	compare(s1, s2);
}


int main()
{
	testcase1();
	testcase2();

	return 0;
}
#include <cstring>
#include <iostream>
#include <string.h>
using namespace std;
class CompareString {
public:
char str[25];
CompareString(char str1[])
{
strcpy(this->str, str1);
}
int operator==(CompareString s2)
{
if (strcmp(str, s2.str) == 0)
return 1;
else
return 0;
}
int operator<=(CompareString s3)
{
if (strlen(str) <= strlen(s3.str))
return 1;
else
return 0;
}
int operator>=(CompareString s3)
{
if (strlen(str) >= strlen(s3.str))
return 1;
else
return 0;}};
void compare(CompareString s1, CompareString s2)
{
if (s1 == s2)
cout << s1.str << " is equal to "
<< s2.str << endl;
else {
cout << s1.str << " is not equal to "
<< s2.str << endl;
if (s1 >= s2)
cout << s1.str << " is greater than "
<< s2.str << endl;
else
cout << s2.str << " is greater than "
<< s1.str << endl; }}
void testcase1()
{
char str1[] = "Geeks";
char str2[] = "ForGeeks";
CompareString s1(str1);
CompareString s2(str2);

cout << "Comparing \"" << s1.str << "\" and \""<< s2.str << "\"" << endl;
compare(s1, s2);
}
void testcase2()
{
char str1[] = "Geeks";
char str2[] = "Geeks";
CompareString s1(str1);
CompareString s2(str2);
cout << "\n\nComparing \"" << s1.str << "\" and \""
<< s2.str << "\"" << endl;
compare(s1, s2);
}
int main()
{   testcase1();
testcase2();
return 0;}


question 7

/*  C++ Program for Complex Operations using Operator Overloading */

#include<iostream>
#include<stdio.h>
using namespace std;
class complex
{
        int real;
        float image;
        public:
        void getdata()
        {
                cout<<"\n enter the real part of the complex :: ";
                cin>>real;
                cout<<"\n enter the imaginary part of the complex :: ";
                cin>>image;
        }
        void operator + (complex);
        void operator - (complex);
};

void complex :: operator +  (complex c1)
{
        complex temp;
        temp.real=real+c1.real;
        temp.image=image+c1.image;
        if (temp.image>=0)
        {
                cout<<"\n complex no. after addition :: ";
                cout<<temp.real<<"+"<<temp.image<<"i\n";
        }
        else
        {
                cout<<"\n complex no. after addition :: ";
                cout<<temp.real<<temp.image<<"i\n";
        }
}
void complex ::operator-(complex c1)
{
        complex temp;
        temp.real = real-c1.image;
        temp.image= image-c1.image;
        if (temp.image>=0)
        {
                cout<<"\n complex no. after subtraction :: ";
                cout<<"\n temp.real"<<"+"<<temp.image<<"i\n";
        }
        else
        {
                cout<<"\n complex no. after subtraction :: ";
                cout<<temp.real<<temp.image<<"i\n";
    }
}
int main()
{

        complex c1, c2;
        int n;
        do
        {
                cout<<"\n 1. Input data for complex no. ";
                cout<<"\n 2. Addition of complex no. ";
                cout<<"\n 3. Subtraction of complex no. ";
                cout<<"\n 4. Quit";
                cout<<"\n Enter your choice :: ";
                cin>>n;
                switch(n)

                {
                         case 1:
                         cout<<endl<<"\n Enter the data for First Complex No......";
                         c1.getdata();
                         cout<<endl<<"\n Enter the data for seconds Complex No.....";
                         c2.getdata();

                         break;

                         case 2:
                         c1+c2;

                         break;

                         case 3:
                         c1-c2;

                         break;

                         case 4:
                         exit(1);
                         break;
                        }
                } while (n!=4);
     return 0;
}
question:4
#include<iostream>
class complex {
    int a, b, c;
public:
complex() {
    }
void getvalue() {
        cout << "Enter the Two Numbers:";
        cin >> a>>b;
    }
void operator++() {
        a = ++a;
        b = ++b;
    }
 void operator--() {
        a = --a;
        b = --b;
    }

    void display() {
        cout << a << "+\t" << b << "i" << endl;
    }
};

void main() {
    complex obj;
    obj.getvalue();
    obj++;
    cout << "Increment Complex Number\n";
    obj.display();
    obj--;
    cout << "Decrement Complex Number\n";
    obj.display();

}

question 9

#include<iostream>
using namespace std;
#define PI 3.1416
float volume(float length, float breadth, float height);
float volume(float radius);
float volume(float radius, float height);
int main(){
float cube_l = 40.0, cube_b = 30.0, cube_h = 10.0;
float sphere_r = 2.5;
float cylinder_r = 2.5, cylinder_h = 10.0;
cout<<"Volume of Cube ="<<volume(cube_l, cube_b, cube_h)<<endl;
cout<<"Volume of Sphere ="<<volume(sphere_r)<<endl;
cout<<"Volume of Cylinder ="<<volume(cylinder_r, cylinder_h)<<endl;
return 0;
}
float volume(float length, float breadth, float height){
return length * breadth * height;
}
float volume(float radius){
return (4.0/3.0) * PI * radius * radius *radius;
}
float volume(float radius, float height){
return PI * radius *radius * height;
}








#include <iostream>  
using namespace std;

int main()  
{  
  int n,r,sum=0,num;    
  cout<<"Enter the No.";    
  cin>>n;    
 num=n;    
 while(n>0)    
{    
 r=n%10;    
 sum=(sum*10)+r;    
 n=n/10;    
}

if(num==sum)    
cout<<"Palindrome ";    
else    
cout<<"Not Palindrome ";  
  return 0;  
}  

